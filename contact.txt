import logging

# Set up logging
logger = logging.getLogger()
logger.setLevel(logging.INFO)

# Predefined contact information
CONTACT_INFO = {
    "contact_no": "8329349481",
    "email_address": "nits@netleapsolutions.com",
    "location": "1st Floor, Avdhoot Aadhar Complex, Opp. ViharMisal, Near-Luthra Agency, Old Gangapur Naka, Gangapur Road, Nashik, Maharashtra 422005"
}

def handle_contact_info(info_type):
    # Construct the response based on the requested info type
    if info_type == "Location":
        content = f"Location: {CONTACT_INFO['location']}"
    elif info_type == "Contact Number":
        content = f"Contact No: {CONTACT_INFO['contact_no']}"
    elif info_type == "Email Address":
        content = f"Email Address: {CONTACT_INFO['email_address']}"
    else:
        content = (
            f"Contact No: {CONTACT_INFO['contact_no']}\n"
            f"Email Address: {CONTACT_INFO['email_address']}\n"
            f"Location: {CONTACT_INFO['location']}"
        )
    
    # Return the response
    return {
        "sessionState": {
            "dialogAction": {
                "type": "Close",
                "fulfillmentState": "Fulfilled",
            },
            "intent": {
                "name": "contctinfo",
                "state": "Fulfilled"
            }
        },
        "messages": [
            {
                "contentType": "PlainText",
                "content": content
            }
        ]
    }

def lambda_handler(event, context):
    try:
        logger.info(f"Received event: {event}")

        # Extract intent name and slot value
        intent_name = event["sessionState"]["intent"]["name"]
        slots = event["sessionState"]["intent"].get("slots", {})
        info_type = slots.get("contact", {}).get("value", {}).get("interpretedValue", None)

        # If the intent is 'contctinfo', return the contact details based on the slot value
        if intent_name == "contctinfo":
            return handle_contact_info(info_type)

        # Default response for unknown intents
        return {
            "sessionState": {
                "dialogAction": {
                    "type": "Close",
                    "fulfillmentState": "Failed",
                },
                "intent": {
                    "name": intent_name,
                    "state": "Failed"
                }
            },
            "messages": [
                {
                    "contentType": "PlainText",
                    "content": "Sorry, I couldn't understand your request."
                }
            ]
        }

    except Exception as e:
        logger.error("Error handling the Lambda function", exc_info=True)
        return {
            "sessionState": {
                "dialogAction": {
                    "type": "Close",
                    "fulfillmentState": "Failed",
                },
                "intent": {
                    "name": "FallbackIntent",
                    "state": "Failed"
                }
            },
            "messages": [
                {
                    "contentType": "PlainText",
                    "content": "An unexpected error occurred. Please try again later."
                }
            ]
        }
